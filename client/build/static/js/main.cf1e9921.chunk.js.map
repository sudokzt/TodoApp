{"version":3,"sources":["containers/Header.js","constants/Task.js","components/Task.js","firebase/config.js","firebase/index.js","actions/Task.js","containers/Task.js","constants/Auth.js","actions/Auth.js","components/Login.js","containers/Auth.js","reducers/Task.js","reducers/Auth.js","store/index.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Reboot_default","AppBar_default","position","Toolbar_default","Typography_default","type","color","DONE","NOT_DONE","NORMAL","EDIT","INPUT_TASK","ADD_TASK","DONE_TASK","SELECT_TASKTYPE","SELECT_DATE","DELETE_TASK","EDIT_MODE","INPUT_EDITTING_TASK","EDIT_DATE","EDIT_TASK","convertDateToStr","date","Date","setTime","getTime","concat","getFullYear","getMonth","getDate","TodoApp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","loadTodos","printTasks","_props","objectSpread","task","tasks","editTasks","printTask","mode","inputTask","addTask","doneTask","deleteTask","selectTaskType","selectDeadLine","editMode","inputEditingTask","editTask","editDeadLine","toggleMode","slice","sort","b","deadLine","filter","status","prevItemDate","className","Button_default","raised","onClick","Input_default","id","onChange","e","target","value","react_datepicker_es","dateFormat","selected","name","map","item","dateDOM","itemDate","key","String","editting","Component","firebaseConfig","apiKey","process","API_KEY","authDomain","AUTH_DOMAIN","databaseURL","FIREBASE_DB_URL","projectId","PROJECT_ID","storageBucket","STORAGE_BUCKET","messagingSenderId","MESSAGING_SENDER_ID","firebase","initializeApp","providerTwitter","auth","TwitterAuthProvider","firebaseDb","database","ref","dispatch","off","on","snapshot","payload","data","val","loadTodosSuccess","error","message","loadTodosError","document","getElementById","push","catch","taskId","getState","currentTaskStatus","todo","update","window","confirm","remove","connect","state","_state$task","bindActionCreators","Actions","Task","LOGIN","LOGOUT","loginResult","_ref","asyncToGenerator","regenerator_default","mark","_callee","user","wrap","_context","prev","next","getRedirectResult","then","result","credential","token","accessToken","secretKey","secret","displayName","uid","abrupt","stop","apply","arguments","login","TWITTER_CUTOMER_SECRET_KEY","TWITTER_CUSTOMER_KEY","LoginButton","onMount","logout","signInWithRedirect","onAuthStateChanged","email","photoURL","emailVerified","require","consumer_key","consumer_secret","access_token_key","access_token_secret","post","tweet","response","authState","signOut","res","success","Login","initialState","todos","taskReducer","length","undefined","action","keys","forEach","newTask","doneTaskIndex","updateTasks","deleteTaskIndex","deletedTasks","splice","v","edittingTasks","edittingDateTasks","activeTaskId","Number","activeElement","edittedTasks","find","authReducer","storageMiddleware","store","localStorage","setItem","JSON","stringify","Boolean","location","hostname","match","parse","getItem","reducerCreateStore","combineReducers","applyMiddleware","logger","thunk","ReactDOM","render","es","Auth","navigator","serviceWorker","ready","registration","unregister"],"mappings":"g/BAOe,SAASA,IACtB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,MACAD,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,KAAK,QAAQC,MAAM,WAA/B,cCZH,IACMC,EAAO,eACPC,EAAW,qBAGXC,EAAS,eACTC,EAAO,eAGPC,EAAa,aACbC,EAAW,WACXC,EAAY,YACZC,EAAkB,kBAClBC,EAAc,cACdC,EAAc,cACdC,EAAY,YACZC,EAAsB,sBACtBC,EAAY,YACZC,EAAY,YCJnBC,EAAmB,SAAAC,GAGvB,OAFAA,EAAO,IAAIC,KAAKD,IACXE,QAAQF,EAAKG,UAAY,OAC9B,GAAAC,OAAUJ,EAAKK,cAAf,KAAAD,OAAgCJ,EAAKM,WAAa,EAAlD,KAAAF,OAAuDJ,EAAKO,YAGzCC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACNQ,QAAQC,IAAIT,GAFKC,mFAMjBG,KAAKJ,MAAMU,6CAIX,IAsBIC,EAtBEX,EAAQI,KAAKJ,MADZY,EAAAV,OAAAW,EAAA,EAAAX,CAAA,GAkBEF,GAfPc,EAHKF,EAGLE,KACAC,EAJKH,EAILG,MACAC,EALKJ,EAKLI,UACAC,EANKL,EAMLK,UACAC,EAPKN,EAOLM,KACAC,EARKP,EAQLO,UACAC,EATKR,EASLQ,QACAC,EAVKT,EAULS,SACAC,EAXKV,EAWLU,WACAC,EAZKX,EAYLW,eACAC,EAbKZ,EAaLY,eACAC,EAdKb,EAcLa,SACAC,EAfKd,EAeLc,iBACAC,EAhBKf,EAgBLe,SACAC,EAjBKhB,EAiBLgB,aAGIC,EAAaX,IAASxC,EAASC,EAAOD,EAc5C,QATEiC,EADEO,IAASxC,EACEqC,EAAMe,QAENd,EAAUc,SAGdC,KAAK,SAAChE,EAAGiE,GAClB,OAAO,IAAIxC,KAAKzB,EAAEkE,UAAY,IAAIzC,KAAKwC,EAAEC,UAAY,GAAK,IAGpDhB,GACN,KAAKzC,EACHmC,EAAaA,EAAWuB,OAAO,SAAApB,GAAI,OAAIA,EAAKqB,SAAW3D,IACvD,MACF,KAAKC,EACHkC,EAAaA,EAAWuB,OAAO,SAAApB,GAAI,OAAIA,EAAKqB,SAAW1D,IAS3D,IAAI2D,EAAe9C,EAAiB,IAAIE,KAAK,KAAM,EAAG,IAEtD,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACH,EAAD,MAEAC,EAAAC,EAAAC,cAAA,WAASqE,UAAU,QACjBvE,EAAAC,EAAAC,cAAA,QAAMqE,UAAU,iBAAhB,kCACAvE,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACEwE,QAAM,EACNhE,MAAM,UACNiE,QAAS,kBAAMf,KACfY,UAAU,UAETR,EANH,6BASA,WAEA,GAAIX,IAASxC,EACX,OACEZ,EAAAC,EAAAC,cAAA,WAASqE,UAAU,YACjBvE,EAAAC,EAAAC,cAAA,OAAKqE,UAAU,iBAAf,wCACAvE,EAAAC,EAAAC,cAACyE,EAAA1E,EAAD,CACE2E,GAAG,kBACHC,SAAU,SAAAC,GAAC,OAAIzB,EAAUyB,EAAEC,OAAOC,UAEpChF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CACEC,WAAW,aACXC,SAAU,IAAIzD,KAAKsB,EAAKmB,UACxBU,SAAUnB,EACVa,UAAU,eAEZvE,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACEwE,QAAM,EACNhE,MAAM,UACNiE,QAAS,kBACPpB,EAAQN,EAAKoC,KAAM5D,EAAiBwB,EAAKmB,YAE3CI,UAAU,UANZ,iBAhBN,GA8BFvE,EAAAC,EAAAC,cAAA,WAASqE,UAAU,gBACjBvE,EAAAC,EAAAC,cAAA,OAAKqE,UAAU,iBAAf,oDACAvE,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CAAQwE,QAAM,EAACC,QAAS,kBAAMjB,ED/HrB,kCCkITzD,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACEwE,QAAM,EACNC,QAAS,kBAAMjB,EAAe9C,IAC9B4D,UAAU,UAET5D,GAEHX,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACEwE,QAAM,EACNC,QAAS,kBAAMjB,EAAe/C,IAC9B6D,UAAU,UAET7D,IAGLV,EAAAC,EAAAC,cAAA,WAASqE,UAAU,eACjBvE,EAAAC,EAAAC,cAAA,MAAIqE,UAAU,cACX1B,EAAWwC,IAAI,SAAAC,GAEd,IAAIC,EAAUvF,EAAAC,EAAAC,cAAA,aACRsF,EAAWhE,EAAiB8D,EAAKnB,UAUvC,OATIqB,IAAalB,IACfiB,EACEvF,EAAAC,EAAAC,cAAA,OAAKqE,UAAU,aACbvE,EAAAC,EAAAC,cAAA,QAAMqE,UAAU,kBAAkBiB,IAGtClB,EAAekB,GAIfxF,EAAAC,EAAAC,cAAA,OAAKuF,IAAKH,EAAKG,KACZF,EACDvF,EAAAC,EAAAC,cAAA,MAAIqE,UAAU,aAINnB,IAASxC,EAETZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMqE,UAAU,aAAae,EAAKF,MAClCpF,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACEwE,QAAM,EACNC,QAAS,kBAAMnB,EAAS+B,EAAKG,MAC7BlB,UAAU,UAETe,EAAKjB,SAOVrE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,EAAA1E,EAAD,CACE+E,MAAOM,EAAKF,KACZP,SAAU,SAAAC,GAAC,OACTlB,EAAiBkB,EAAEC,OAAOC,MAAOM,EAAKG,QAG1CzF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CACEC,WAAW,aACXC,SAAU,IAAIzD,KAAK4D,EAAKnB,UACxBU,SAAUf,EACVS,UAAS,GAAA1C,OAAK6D,OAAOJ,EAAKG,KAAjB,iBAEXzF,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACEwE,QAAM,EACNC,QAAS,kBAAMb,EAASyB,EAAKG,MAC7BlB,UAAU,UAHZ,gBAOAvE,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACEwE,QAAM,EACNhE,MAAM,YACNiE,QAAS,kBAAMlB,EAAW8B,EAAKG,MAC/BlB,UAAU,UAJZ,gBAQE,WACA,IAAsB,IAAlBe,EAAKK,SACP,OACE3F,EAAAC,EAAAC,cAAA,QAAMqE,UAAU,oBACdvE,EAAAC,EAAAC,cAAA,KAAGqE,UAAU,yCADf,4EAHJ,kBA/LOqB,+BCFtBC,wBATQ,CACrBC,OAVAC,8CAAYC,SAAW,0CAWvBC,WAVkBF,8CAAYG,aAAe,gCAW7CC,YATAJ,8CAAYK,iBAAmB,uCAU/BC,UATiBN,8CAAYO,YAAc,gBAU3CC,cARAR,8CAAYS,gBAAkB,4BAS9BC,kBAR0BV,8CAAYW,qBAAuB,iBCD/DC,IAASC,cAAcf,GAEhB,IAAMgB,EAAkB,IAAIF,IAASG,KAAKC,oBACpCC,EAAaL,IAASM,WACpBN,IAAf,ECGMO,EAAMF,EAAWE,IAAI,SAGpB,SAAStE,IAEd,OADAF,QAAQC,IAAI,+BACL,SAAAwE,GACLD,EAAIE,MAEJF,EAAIG,GACF,QACA,SAAAC,GACEH,EASR,SAA0BG,GACxB,MAAO,CACL9G,KAAM,qBACN+G,QAAS,CACPC,KAAMF,EAASG,QAbJC,CAAiBJ,KAE5B,SAAAK,GACER,EAeR,SAAwBQ,GACtB,MAAO,CACLnH,KAAM,sBACN+G,QAAS,CACPK,QAASD,EAAMC,UAnBJC,CAAeF,OAyBzB,SAAStE,GAAUL,GACxB,MAAO,CACLxC,KAAMM,EACNyG,QAAS,CACPvE,SAMC,SAASM,GAAQN,EAAMmB,GAK5B,OAHoB2D,SAASC,eAAe,mBAC9B/C,MAAQ,GAEf,SAAAmC,GACLD,EACGc,KAAK,CACJhF,OACAmB,WACAE,OAAQ1D,IAETsH,MAAM,SAAAN,GAAK,OACVR,EAAS,CACP3G,KAAM,iBACN+G,QAAS,CACPK,QAASD,EAAMC,cAQpB,SAASrE,GAAS2E,GACvB,OAAO,SAACf,EAAUgB,GAChB,IACMC,EADaD,IAAWnF,KAAKC,MACEmB,OAAO,SAAAiE,GAAI,OAAIA,EAAK5C,MAAQyC,IAAQ,GACtE7D,OACH2C,EACGE,IADH,SAAArF,OACgBqG,IACbI,OAAO,CAAEjE,OAAQ+D,IAAsB1H,EAAOC,EAAWD,IACzDuH,MAAM,SAAAN,GACLR,EAAS,CACP3G,KAAM,kBACN+G,QAAS,CACPK,QAASD,QAQd,SAASlE,GAAeN,GAC7B,MAAO,CACL3C,KAAMS,EACNsG,QAAS,CACPpE,cAMC,SAASO,GAAejC,GAC7B,MAAO,CACLjB,KAAMU,EACNqG,QAAS,CACPpD,SAAU1C,IAMT,SAAS+B,GAAW0E,GACzB,OAAIK,OAAOC,QAAQ,sEACV,SAAArB,GAELH,EACGE,IADH,SAAArF,OACgBqG,IACbO,SACAR,MAAM,SAAAN,GAAK,OACVR,EAAS,CACP3G,KAAM,oBACN+G,QAAS,CACPK,QAASD,EAAMC,cAMlB,CACLpH,KAAM,QAML,SAASmD,KACd,MAAO,CACLnD,KAAMY,GAKH,SAASwC,GAAiBZ,EAAMkF,GACrC,MAAO,CACL1H,KAAMa,EACNkG,QAAS,CACPvE,OACAkF,WAMC,SAASpE,GAAarC,GAC3B,MAAO,CACLjB,KAAMc,EACNiG,QAAS,CACPpD,SAAU1C,IAMT,SAASoC,GAASqE,GACvB,MAAO,CACL1H,KAAMe,EACNgG,QAAS,CACPW,WClKSQ,mBAff,SAAyBC,GAAO,IAAAC,EACsBD,EAAM3F,KAC1D,MAAO,CACLA,KAH4B4F,EACtB5F,KAGNC,MAJ4B2F,EAChB3F,MAIZC,UAL4B0F,EACT1F,UAKnBC,UAN4ByF,EACEzF,UAM9BC,KAP4BwF,EACaxF,OAU7C,SAA4B+D,GAC1B,OAAO0B,YAAmBC,EAAS3B,IAGtBuB,CAGbK,kCCxBWC,GAAQ,QACRC,GAAS,SCGhBC,GAAW,eAAAC,EAAA/G,OAAAgH,GAAA,EAAAhH,CAAAiH,GAAApJ,EAAAqJ,KAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,GAAApJ,EAAAwJ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEdJ,EAAO,GAFOE,EAAAE,KAAA,EAGZjD,EACHG,OACA+C,oBACAC,KAAK,SAAAC,GACJ,GAAIA,EAAOC,WAAY,CACrB,IAAMC,EAAST,EAAI,MAAYO,EAAOC,WAAWE,YAC3CC,EAAaX,EAAI,UAAgBO,EAAOC,WAAWI,OACzD1H,QAAQC,IAAI,CAAEsH,QAAOE,cAEnBJ,EAAOP,OAETA,EAAI,KAAWO,EAAOP,KAAKa,YAC3Bb,EAAI,IAAUO,EAAOP,KAAKc,OAfd,cAAAZ,EAAAa,OAAA,SAkBXf,GAlBW,wBAAAE,EAAAc,SAAAjB,MAAH,yBAAAJ,EAAAsB,MAAAnI,KAAAoI,YAAA,GAgDXC,GAAQ,SAAAnB,GAAI,MAAK,CACrBhJ,KAAMwI,GACNzB,QAAS,CACP+C,IAAKd,EAAKc,IACVD,YAAab,EAAKpE,KAClB6E,MAAOT,EAAKS,MACZE,UAAWX,EAAKW,aCtDdS,GAA6B7E,8CAAY6E,2BACzCC,GAAuB9E,8CAAY8E,qBAQpBC,+LAEjBxI,KAAKJ,MAAM6I,2CAGJ,IAAA5I,EAAAG,KACP,OACEtC,EAAAC,EAAAC,cAAA,WACIoC,KAAKJ,MAAMoI,IAKXtK,EAAAC,EAAAC,cAAA,UAAQ0E,GAAG,gBAAgBF,QAAS,kBAAMvC,EAAKD,MAAM8I,WAArD,kCAJAhL,EAAAC,EAAAC,cAAA,UAAQ0E,GAAG,eAAeF,QAAS,WAZ3CiC,EAASG,OAAOmE,mBAAmBpE,KAY3B,4BAQF7G,EAAAC,EAAAC,cAAA,UACEwE,QAAS,WACPiC,EACGG,OACAoE,mBAAmB,SAAA1B,GAEN,MAARA,IACKA,EAAKa,YACJb,EAAK2B,MACF3B,EAAK4B,SACA5B,EAAK6B,cACf7B,EAAKc,IACX5H,QAAQC,IAAI6G,MAGfvB,MAAM,SAASN,GAEdjF,QAAQC,IAAI,CAAEgF,cAjBtB,wCAuBA3H,EAAAC,EAAAC,cAAA,UACEwE,QAAS,WAYQ,IAXC4G,EAAQ,KAWT,CATF,CACXC,aAAcV,GACdW,gBAAiBZ,GACjBa,iBACE,qDACFC,oBACE,kDAIGC,KAAP,kBAEE,CAAEtH,OAAQ,0DACV,SAASsD,EAAOiE,EAAOC,GAChBlE,EAGHjF,QAAQC,IAAIgF,GAFZjF,QAAQC,IAAIiJ,OAnBtB,8BAxCiChG,aCS1B8C,eAhBS,SAAAC,GACtB,IAAMmD,EAAYnD,EAAM7B,KACxB,OAAO1E,OAAAW,EAAA,EAAAX,CAAA,GAAK0J,IAGa,SAAA3E,GACzB,MAAO,CACL4D,QADK,WAEH5D,EFYG,SAAAA,GACL+B,KACGY,KAAK,SAAAN,GAAI,OAAIrC,EAASwD,GAAMnB,MAC5BvB,MAAM,SAAAnD,GAAC,OAAIpC,QAAQC,IAAI,CAAEmC,WEb5BkG,OAJK,WAKH7D,GFiBJR,EACGG,OACAiF,UACAjC,KAAK,SAAAkC,GACJtJ,QAAQC,IAAI,CACVsJ,QAASD,MAGZ/D,MAAM,SAASN,GACdjF,QAAQC,IAAI,CACVgF,YAGC,CACLnH,KAAMyI,SE1BKP,CAGbwD,mCCPIC,GAAe,CACnBnJ,KAAM,CACJ4B,GAAI,EACJQ,KAAM,GACNf,OAAQ,GACRF,SAAU,IAAIzC,MAEhBuB,MAAO,GACPC,UAAW,GACXC,UV1BiB,eU2BjBC,KAAMxC,EACNwL,MAAO,IAGM,SAASC,KAA0C,IAA9B1D,EAA8B+B,UAAA4B,OAAA,QAAAC,IAAA7B,UAAA,GAAAA,UAAA,GAAtByB,GAAcK,EAAQ9B,UAAA4B,OAAA,EAAA5B,UAAA,QAAA6B,EACxDvJ,EAAiC2F,EAAjC3F,KAAaI,GAAoBuF,EAA3B1F,MAA2B0F,EAApBvF,MAAMF,EAAcyF,EAAdzF,UAC3BR,QAAQC,IAAIgG,GAFoD,IAGxDnI,EAAkBgM,EAAlBhM,KAAM+G,EAAYiF,EAAZjF,QACd,OAAQ/G,GAEN,IAAK,qBACH,IAAIyC,EAAQ,GACZP,QAAQC,IAAI,WACZ,IAAI6E,EAAOgF,EAAOjF,QAAQC,KAY1B,OAXIA,GACFpF,OAAOqK,KAAKjF,GAAMkF,QAAQ,SAAAjH,GACxB,IAAI4C,EAAOb,EAAK/B,GAChBxC,EAAM+E,KAAK,CACTvC,IAAKA,EACLL,KAAMiD,EAAKrF,KACXqB,OAAQgE,EAAKhE,OACbF,SAAUkE,EAAKlE,aAId/B,OAAAW,EAAA,EAAAX,CAAA,GACFuG,EADL,CAEE1F,UAIJ,KAAKnC,EACH,OAAOsB,OAAAW,EAAA,EAAAX,CAAA,GACFuG,EADL,CAEE3F,KAAKZ,OAAAW,EAAA,EAAAX,CAAA,GACAY,EADD,CAEFoC,KAAMmC,EAAQvE,SAKpB,KAAKjC,EACH,IAAM4L,EAAU,CACd/H,GAAI3B,EAAMqJ,OACVlH,KAAMmC,EAAQvE,KACdmB,SAAUnB,EAAKmB,SACfE,OAAQ1D,GAEV,OAAOyB,OAAAW,EAAA,EAAAX,CAAA,GACFuG,EADL,CAEE3F,KAAM,CACJoC,KAAM,GACNf,OAAQ,GACRF,SAAU,IAAIzC,MAEhBuB,MAAOA,EAAMpB,OAAO,CAAC8K,MAIzB,KAAK3L,EACH,IAAM4L,EAAgBrF,EAAQW,OACxB2E,EAAc5J,EAAMe,QAG1B,OAFA6I,EAAYD,GAAevI,OACzBwI,EAAYD,GAAevI,SAAW3D,EAAOC,EAAWD,EACnD0B,OAAAW,EAAA,EAAAX,CAAA,GACFuG,EADL,CAEE1F,MAAO4J,IAIX,KAAK5L,EACH,OAAOmB,OAAAW,EAAA,EAAAX,CAAA,GACFuG,EADL,CAEExF,UAAWoE,EAAQpE,YAIvB,KAAKjC,EACH,OAAOkB,OAAAW,EAAA,EAAAX,CAAA,GACFuG,EADL,CAEE3F,KAAKZ,OAAAW,EAAA,EAAAX,CAAA,GACAY,EADD,CAEFmB,SAAUoD,EAAQpD,aAKxB,KAAKhD,EACH,IAAM2L,EAAkBvF,EAAQW,OAC1B6E,EAAe9J,EAAMe,QAK3B,OAJA+I,EAAaC,OAAOF,EAAiB,GACrCC,EAAaL,QAAQ,SAAAO,GACfA,EAAErI,GAAKkI,GAAiBG,EAAErI,OAEzBxC,OAAAW,EAAA,EAAAX,CAAA,GACFuG,EADL,CAEE1F,MAAO8J,EACP7J,UAAW6J,EAAa/I,UAI5B,KAAK5C,EACH,OAAOgB,OAAAW,EAAA,EAAAX,CAAA,GACFuG,EADL,CAEEvF,KAAMA,IAASvC,EAAOD,EAASC,EAC/BqC,UAAWD,EAAMe,UAIrB,KAAK3C,EACH,IAAM6L,EAAgBhK,EAAUc,QAMhC,OALAkJ,EAAc3F,EAAQW,QAAtB9F,OAAAW,EAAA,EAAAX,CAAA,GACK8K,EAAc3F,EAAQW,QAD3B,CAEE9C,KAAMmC,EAAQvE,KACd2C,UAAU,IAELvD,OAAAW,EAAA,EAAAX,CAAA,GACFuG,EADL,CAEEzF,UAAWgK,IAIf,KAAK5L,EACH,IAAM6L,EAAoBjK,EAAUc,QAChCoJ,EAAeC,OAAOvF,SAASwF,cAAc/I,UAAU,IAM3D,OALA4I,EAAkBC,GAAlBhL,OAAAW,EAAA,EAAAX,CAAA,GACK+K,EAAkBC,GADvB,CAEEjJ,SAAUoD,EAAQpD,SAClBwB,UAAU,IAELvD,OAAAW,EAAA,EAAAX,CAAA,GACFuG,EADL,CAEEzF,UAAWiK,IAIf,KAAK5L,EACH,IAAMgM,EAAetK,EAAMe,QAO3B,OANAuJ,EAAaC,KAAK,SAAAP,GAAC,OAAIA,EAAErI,KAAO2C,EAAQW,SAAQ9C,KAAOlC,EAAUsK,KAC/D,SAAAP,GAAC,OAAIA,EAAErI,KAAO2C,EAAQW,SACtB9C,KACFmI,EAAahG,EAAQW,QAAQ/D,SAC3BjB,EAAUqE,EAAQW,QAAQ/D,SAC5BjB,EAAUqE,EAAQW,QAAQvC,UAAW,EAC9BvD,OAAAW,EAAA,EAAAX,CAAA,GACFuG,EADL,CAEE1F,MAAOsK,EACPrK,cAGJ,QACE,OAAOyF,GCjLb,IAAMwD,GAAe,CACnB7B,IAAK,KACLD,YAAa,KACbJ,MAAO,KACPE,UAAW,MAGE,SAASsD,KAA0C,IAA9B9E,EAA8B+B,UAAA4B,OAAA,QAAAC,IAAA7B,UAAA,GAAAA,UAAA,GAAtByB,GAAcK,EAAQ9B,UAAA4B,OAAA,EAAA5B,UAAA,QAAA6B,EAChE,OAAQC,EAAOhM,MACb,KAAKwI,GACH,OAAIwD,EAAOjF,QAAQ+C,IACV,CACLA,IAAKkC,EAAOjF,QAAQ+C,IACpBD,YAAamC,EAAOjF,QAAQ8C,YAC5BJ,MAAOuC,EAAOjF,QAAQ0C,MACtBE,UAAWqC,EAAOjF,QAAQ4C,WAGrBxB,EAEX,KAAKM,GACH,MAAO,CACLqB,IAAK,KACLD,YAAa,KACbJ,MAAO,KACPE,UAAW,MAEf,QACE,OAAOxB,GClBb,IAAM+E,GAAoB,SAAAC,GAAK,OAAI,SAAA/D,GAAI,OAAI,SAAA4C,GACzC,IAAMzC,EAASH,EAAK4C,GAEpB,OADAoB,aAAaC,QAAQ,YAAaC,KAAKC,UAAUJ,EAAMxF,WAAWnF,OAC3D+G,KCHWiE,QACW,cAA7BzF,OAAO0F,SAASC,UAEa,UAA7B3F,OAAO0F,SAASC,UAEhB3F,OAAO0F,SAASC,SAASC,MACvB,2DCNJ,IAAMR,IFQmBG,KAAKM,MAAMR,aAAaS,QAAQ,cAChDC,YACLC,YAAgB,CAAEvL,KAAMqJ,GAAavF,KAAM2G,KAC3Ce,YAAgBC,KAAQC,KAAOhB,MEVnCiB,IAASC,OACP5O,EAAAC,EAAAC,cAAC2O,EAAA,EAAD,CAAUlB,MAAOA,IACf3N,EAAAC,EAAAC,cAAC6I,GAAD,MACA/I,EAAAC,EAAAC,cAAC4O,GAAD,OAEFhH,SAASC,eAAe,SD+GpB,kBAAmBgH,WACrBA,UAAUC,cAAcC,MAAMnF,KAAK,SAAAoF,GACjCA,EAAaC","file":"static/js/main.cf1e9921.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Reboot from \"material-ui/Reboot\";\nimport AppBar from \"material-ui/AppBar\";\nimport ToolBar from \"material-ui/Toolbar\";\nimport Typography from \"material-ui/Typography\";\n\nexport default function Header() {\n  return (\n    <div>\n      <Reboot />\n      <AppBar position=\"static\">\n        <ToolBar>\n          <Typography type=\"title\" color=\"inherit\">\n            TodoApp\n          </Typography>\n        </ToolBar>\n      </AppBar>\n    </div>\n  );\n}\n","// タスクの状態\nexport const ALL = \"全て\";\nexport const DONE = \"完了\";\nexport const NOT_DONE = \"未完了\";\n\n// 画面モード\nexport const NORMAL = \"通常\";\nexport const EDIT = \"編集\";\n\n// アクションタイプ\nexport const INPUT_TASK = \"INPUT_TASK\";\nexport const ADD_TASK = \"ADD_TASK\";\nexport const DONE_TASK = \"DONE_TASK\";\nexport const SELECT_TASKTYPE = \"SELECT_TASKTYPE\"; // 表示するタスク状態を選択\nexport const SELECT_DATE = \"SELECT_DATE\";\nexport const DELETE_TASK = \"DELETE_TASK\";\nexport const EDIT_MODE = \"EDIT_MODE\";\nexport const INPUT_EDITTING_TASK = \"INPUT_EDITTING_TASK\"; // 編集中（編集モードにて入力中）\nexport const EDIT_DATE = \"EDIT_DATE\"; // 編集モードにてカレンダー選択\nexport const EDIT_TASK = \"EDIT_TASK\"; // 編集モードにて更新ボタンクリック時\n","import React, { Component } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport PropTypes from \"prop-types\";\n\nimport \"../css/task.css\";\n// date-pickerのcss\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport Button from \"material-ui/Button\";\nimport Input from \"material-ui/Input\";\n\nimport Header from \"../containers/Header\";\nimport { ALL, DONE, NOT_DONE, NORMAL, EDIT } from \"../constants/Task\";\n\n// Date型からstr型へ変換する関数\nconst convertDateToStr = date => {\n  date = new Date(date);\n  date.setTime(date.getTime() + 1000 * 60 * 60 * 9); // JSTに変換\n  return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\n};\n\nexport default class TodoApp extends Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n  }\n\n  componentDidMount() {\n    this.props.loadTodos();\n  }\n\n  render() {\n    const props = this.props;\n    let {\n      task,\n      tasks,\n      editTasks,\n      printTask,\n      mode,\n      inputTask,\n      addTask,\n      doneTask,\n      deleteTask,\n      selectTaskType,\n      selectDeadLine,\n      editMode,\n      inputEditingTask,\n      editTask,\n      editDeadLine\n    } = { ...props };\n\n    const toggleMode = mode === NORMAL ? EDIT : NORMAL; // 「モード変更ボタンには」現在のモードと逆のものを表示するため\n    /*************************************************************************************************************/\n    // 表示するタスク一覧に絞り込み\n    let printTasks;\n    if (mode === NORMAL) {\n      printTasks = tasks.slice();\n    } else {\n      printTasks = editTasks.slice();\n    }\n    // ソート\n    printTasks.sort((a, b) => {\n      return new Date(a.deadLine) > new Date(b.deadLine) ? 1 : -1;\n    });\n\n    switch (printTask) {\n      case DONE:\n        printTasks = printTasks.filter(task => task.status === DONE);\n        break;\n      case NOT_DONE:\n        printTasks = printTasks.filter(task => task.status === NOT_DONE);\n        break;\n      default:\n        break;\n    }\n\n    /*************************************************************************************************************/\n\n    // 期限単位で表示をまとめるために1つ前に表示した日付を保持しておく\n    let prevItemDate = convertDateToStr(new Date(1990, 1, 1));\n\n    return (\n      <div>\n        <Header />\n\n        <section className=\"mode\">\n          <span className=\"section-title\">モード選択</span>\n          <Button\n            raised\n            color=\"primary\"\n            onClick={() => editMode()}\n            className=\"button\"\n          >\n            {toggleMode}モードへ\n          </Button>\n        </section>\n        {(() => {\n          /* 通常モード */\n          if (mode === NORMAL) {\n            return (\n              <section className=\"add-task\">\n                <div className=\"section-title\">タスクの追加</div>\n                <Input\n                  id=\"input_task_area\"\n                  onChange={e => inputTask(e.target.value)}\n                />\n                <DatePicker\n                  dateFormat=\"yyyy/MM/dd\"\n                  selected={new Date(task.deadLine)}\n                  onChange={selectDeadLine}\n                  className=\"input-date\"\n                />\n                <Button\n                  raised\n                  color=\"primary\"\n                  onClick={() =>\n                    addTask(task.name, convertDateToStr(task.deadLine))\n                  }\n                  className=\"button\"\n                >\n                  追加\n                </Button>\n              </section>\n            );\n          }\n        })()}\n        <section className=\"filter-tasks\">\n          <div className=\"section-title\">タスクの絞り込み</div>\n          <Button raised onClick={() => selectTaskType(ALL)}>\n            {ALL}\n          </Button>\n          <Button\n            raised\n            onClick={() => selectTaskType(NOT_DONE)}\n            className=\"button\"\n          >\n            {NOT_DONE}\n          </Button>\n          <Button\n            raised\n            onClick={() => selectTaskType(DONE)}\n            className=\"button\"\n          >\n            {DONE}\n          </Button>\n        </section>\n        <section className=\"print-tasks\">\n          <ul className=\"tasks-list\">\n            {printTasks.map(item => {\n              // 期限単位で表示をまとめる\n              let dateDOM = <span />;\n              const itemDate = convertDateToStr(item.deadLine);\n              if (itemDate !== prevItemDate) {\n                dateDOM = (\n                  <div className=\"task-date\">\n                    <span className=\"task-date-text\">{itemDate}</span>\n                  </div>\n                );\n                prevItemDate = itemDate;\n              }\n\n              return (\n                <div key={item.key}>\n                  {dateDOM}\n                  <li className=\"task-item\">\n                    {(() => {\n                      // モードによって返すDOMを変更\n                      /* 通常モード */\n                      if (mode === NORMAL) {\n                        return (\n                          <div>\n                            <span className=\"task-name\">{item.name}</span>\n                            <Button\n                              raised\n                              onClick={() => doneTask(item.key)}\n                              className=\"button\"\n                            >\n                              {item.status}\n                            </Button>\n                          </div>\n                        );\n                      } else {\n                        /* 編集モード */\n                        return (\n                          <div>\n                            <Input\n                              value={item.name}\n                              onChange={e =>\n                                inputEditingTask(e.target.value, item.key)\n                              }\n                            />\n                            <DatePicker\n                              dateFormat=\"yyyy/MM/dd\"\n                              selected={new Date(item.deadLine)}\n                              onChange={editDeadLine}\n                              className={`${String(item.key)} input-date`}\n                            />\n                            <Button\n                              raised\n                              onClick={() => editTask(item.key)}\n                              className=\"button\"\n                            >\n                              更新\n                            </Button>\n                            <Button\n                              raised\n                              color=\"secondary\"\n                              onClick={() => deleteTask(item.key)}\n                              className=\"button\"\n                            >\n                              削除\n                            </Button>\n                            {(() => {\n                              if (item.editting === true) {\n                                return (\n                                  <span className=\"editting-message\">\n                                    <i className=\"fas fa-exclamation-triangle warnning\" />\n                                    変更が保存されていません\n                                  </span>\n                                );\n                              }\n                            })()}\n                          </div>\n                        );\n                      }\n                    })()}\n                  </li>\n                </div>\n              );\n            })}\n          </ul>\n        </section>\n      </div>\n    );\n  }\n}\n\n// 型指定\nTodoApp.propTypes = {\n  task: PropTypes.object.isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  editTasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  printTask: PropTypes.string.isRequired,\n  mode: PropTypes.string.isRequired,\n  inputTask: PropTypes.func.isRequired,\n  addTask: PropTypes.func.isRequired,\n  doneTask: PropTypes.func.isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  selectTaskType: PropTypes.func.isRequired,\n  selectDeadLine: PropTypes.func.isRequired,\n  editMode: PropTypes.func.isRequired,\n  inputEditingTask: PropTypes.func.isRequired,\n  editTask: PropTypes.func.isRequired,\n  editDeadLine: PropTypes.func.isRequired\n};\n","const API_KEY =\n  process.env.API_KEY || \"AIzaSyBTxA00Brdp2ienIyYPKYXvarbn3DLRVSw\";\nconst AUTH_DOMAIN = process.env.AUTH_DOMAIN || \"tweet-todoapp.firebaseapp.com\";\nconst FIREBASE_DB_URL =\n  process.env.FIREBASE_DB_URL || \"https://tweet-todoapp.firebaseio.com\";\nconst PROJECT_ID = process.env.PROJECT_ID || \"tweet-todoapp\";\nconst STORAGE_BUCKET =\n  process.env.STORAGE_BUCKET || \"tweet-todoapp.appspot.com\";\nconst MESSAGING_SENDER_ID = process.env.MESSAGING_SENDER_ID || \"199853674354\";\n\nconst firebaseConfig = {\n  apiKey: API_KEY,\n  authDomain: AUTH_DOMAIN,\n  databaseURL: FIREBASE_DB_URL,\n  projectId: PROJECT_ID,\n  storageBucket: STORAGE_BUCKET,\n  messagingSenderId: MESSAGING_SENDER_ID\n};\n\nexport default firebaseConfig;\n","import firebase from \"firebase/app\";\nimport \"firebase/firestore\"; //firestoreを使う場合\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nimport firebaseConfig from \"./config\";\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const providerTwitter = new firebase.auth.TwitterAuthProvider();\nexport const firebaseDb = firebase.database();\nexport default firebase;\n","import { firebaseDb } from \"../firebase\";\nimport {\n  INPUT_TASK,\n  SELECT_TASKTYPE,\n  SELECT_DATE,\n  EDIT_MODE,\n  INPUT_EDITTING_TASK,\n  EDIT_DATE,\n  EDIT_TASK,\n  DONE,\n  NOT_DONE\n} from \"../constants/Task\";\n\n// firebase realtime db のtodosテーブル変数\nconst ref = firebaseDb.ref(\"todos\");\n\n// firebase RealTime DB への変更を監視\nexport function loadTodos() {\n  console.log(\"firebase の更新\");\n  return dispatch => {\n    ref.off();\n    // テーブルの変更を監視する\n    ref.on(\n      \"value\",\n      snapshot => {\n        dispatch(loadTodosSuccess(snapshot));\n      },\n      error => {\n        dispatch(loadTodosError(error));\n      }\n    );\n  };\n}\n// ロード成功時コールバック\nfunction loadTodosSuccess(snapshot) {\n  return {\n    type: \"TODOS_RECEIVE_DATA\",\n    payload: {\n      data: snapshot.val()\n    }\n  };\n}\n// ロード失敗時コールバック\nfunction loadTodosError(error) {\n  return {\n    type: \"TODOS_RECEIVE_ERROR\",\n    payload: {\n      message: error.message\n    }\n  };\n}\n\n// タスク名入力時のアクション、入力中タスク名が渡される\nexport function inputTask(task) {\n  return {\n    type: INPUT_TASK,\n    payload: {\n      task\n    }\n  };\n}\n\n// 追加ボタンクリック時のアクション、タスク名とタスク期限が渡される\nexport function addTask(task, deadLine) {\n  // タスク入力部の空欄化\n  let inputTaskArea = document.getElementById(\"input_task_area\");\n  inputTaskArea.value = \"\";\n  // 入力タスクをDBに保存\n  return dispatch => {\n    ref\n      .push({\n        task,\n        deadLine,\n        status: NOT_DONE\n      })\n      .catch(error =>\n        dispatch({\n          type: \"ADD_TASK_ERROR\",\n          payload: {\n            message: error.message\n          }\n        })\n      );\n  };\n}\n\n// 完了ボタンクリック時のアクション、該当タスクのインデックスが渡される\nexport function doneTask(taskId) {\n  return (dispatch, getState) => {\n    const storeTasks = getState().task.tasks;\n    const currentTaskStatus = storeTasks.filter(todo => todo.key === taskId)[0]\n      .status;\n    firebaseDb\n      .ref(`todos/${taskId}`)\n      .update({ status: currentTaskStatus === DONE ? NOT_DONE : DONE })\n      .catch(error => {\n        dispatch({\n          type: \"DONE_TASK_ERROR\",\n          payload: {\n            message: error\n          }\n        });\n      });\n  };\n}\n\n// タスクステータス選択時のアクション、表示するステータスが渡される\nexport function selectTaskType(printTask) {\n  return {\n    type: SELECT_TASKTYPE,\n    payload: {\n      printTask\n    }\n  };\n}\n\n// タスク締め切り選択時のアクション、表示する日付が渡される\nexport function selectDeadLine(date) {\n  return {\n    type: SELECT_DATE,\n    payload: {\n      deadLine: date\n    }\n  };\n}\n\n// タスク削除クリック時のアクション、該当タスクのインデックスが渡される\nexport function deleteTask(taskId) {\n  if (window.confirm(\"削除してよろしいですか\")) {\n    return dispatch => {\n      // パスをオブジェクトを削除\n      firebaseDb\n        .ref(`todos/${taskId}`)\n        .remove()\n        .catch(error =>\n          dispatch({\n            type: \"DELETE_TASK_ERROR\",\n            payload: {\n              message: error.message\n            }\n          })\n        );\n    };\n  } else {\n    return {\n      type: \"NONE\"\n    };\n  }\n}\n\n// [編集or完了]ボタンクリック時のアクション、モードが変更される。押したモードが渡される\nexport function editMode() {\n  return {\n    type: EDIT_MODE\n  };\n}\n\n// タスク名入力時のアクション、入力中タスク名が渡される\nexport function inputEditingTask(task, taskId) {\n  return {\n    type: INPUT_EDITTING_TASK,\n    payload: {\n      task,\n      taskId\n    }\n  };\n}\n\n// タスク締め切り選択時のアクション、表示する日付が渡される\nexport function editDeadLine(date) {\n  return {\n    type: EDIT_DATE,\n    payload: {\n      deadLine: date\n    }\n  };\n}\n\n// タスク編集クリック時のアクション、該当タスクの編集後の値とインデックスが渡される\nexport function editTask(taskId) {\n  return {\n    type: EDIT_TASK,\n    payload: {\n      taskId\n    }\n  };\n}\n","import { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport Task from \"../components/Task\";\nimport * as Actions from \"../actions/Task\";\n\nfunction mapStateToProps(state) {\n  const { task, tasks, editTasks, printTask, mode } = state.task;\n  return {\n    task,\n    tasks,\n    editTasks,\n    printTask,\n    mode\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(Actions, dispatch);\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Task);\n","export const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\n","import { LOGIN, LOGOUT } from \"../constants/Auth\";\n\nimport firebase from \"../firebase\";\n\nconst loginResult = async () => {\n  // リダイレクトした時の結果を取得\n  let user = {};\n  await firebase\n    .auth()\n    .getRedirectResult()\n    .then(result => {\n      if (result.credential) {\n        const token = (user[\"token\"] = result.credential.accessToken);\n        const secretKey = (user[\"secretKey\"] = result.credential.secret);\n        console.log({ token, secretKey });\n      }\n      if (result.user) {\n        // The signed-in user info.\n        user[\"name\"] = result.user.displayName;\n        user[\"uid\"] = result.user.uid;\n      }\n    });\n  return user;\n};\n\nexport const loginOk = () => {\n  return dispatch => {\n    loginResult()\n      .then(user => dispatch(login(user)))\n      .catch(e => console.log({ e }));\n  };\n};\n\nexport const logout = () => {\n  firebase\n    .auth()\n    .signOut()\n    .then(res => {\n      console.log({\n        success: res\n      });\n    })\n    .catch(function(error) {\n      console.log({\n        error\n      });\n    });\n  return {\n    type: LOGOUT\n  };\n};\n\nconst login = user => ({\n  type: LOGIN,\n  payload: {\n    uid: user.uid,\n    displayName: user.name,\n    token: user.token,\n    secretKey: user.secretKey\n  }\n});\n","import React, { Component } from \"react\";\n\nimport firebase, { providerTwitter } from \"../firebase/\";\n\nconst TWITTER_CUTOMER_SECRET_KEY = process.env.TWITTER_CUTOMER_SECRET_KEY;\nconst TWITTER_CUSTOMER_KEY = process.env.TWITTER_CUSTOMER_KEY;\n\n// ログインハンドラー\nconst handleLoginButton = () => {\n  // リダイレクトにてTwitterログイン画面を開く\n  firebase.auth().signInWithRedirect(providerTwitter);\n};\n\nexport default class LoginButton extends Component {\n  componentDidMount() {\n    this.props.onMount();\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.props.uid ? (\n          <button id=\"login-button\" onClick={() => handleLoginButton()}>\n            ログイン\n          </button>\n        ) : (\n          <button id=\"logout-button\" onClick={() => this.props.logout()}>\n            ログアウト\n          </button>\n        )}\n        <button\n          onClick={() => {\n            firebase\n              .auth()\n              .onAuthStateChanged(user => {\n                let name, email, photoUrl, uid, emailVerified;\n                if (user != null) {\n                  name = user.displayName;\n                  email = user.email;\n                  photoUrl = user.photoURL;\n                  emailVerified = user.emailVerified;\n                  uid = user.uid;\n                  console.log(user);\n                }\n              })\n              .catch(function(error) {\n                // Handle error\n                console.log({ error });\n              });\n          }}\n        >\n          ユーザー確認\n        </button>\n        <button\n          onClick={() => {\n            const twitter = require(\"twitter\");\n\n            const test = {\n              consumer_key: TWITTER_CUSTOMER_KEY,\n              consumer_secret: TWITTER_CUTOMER_SECRET_KEY,\n              access_token_key:\n                \"847735307696955392-lf9IFJ0Kip2tRU4wFmk1ea9ZQQzO6WG\",\n              access_token_secret:\n                \"caGrSNdemt3C8MF7LFFSqlOe0jBSTVEux3CWNN85nSYl4\"\n            };\n\n            const client = new twitter(test);\n            client.post(\n              `statuses/update`,\n              { status: \"ツイートしたい内容\" },\n              function(error, tweet, response) {\n                if (!error) {\n                  console.log(tweet);\n                } else {\n                  console.log(error);\n                }\n              }\n            );\n          }}\n        >\n          テスト\n        </button>\n      </div>\n    );\n  }\n}\n","import { connect } from \"react-redux\";\n\nimport { loginOk, logout } from \"../actions/Auth\";\n\nimport Login from \"../components/Login\";\n\nconst mapStateToProps = state => {\n  const authState = state.auth;\n  return { ...authState };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onMount() {\n      dispatch(loginOk());\n    },\n    logout() {\n      dispatch(logout());\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n","import {\n  ALL,\n  DONE,\n  NOT_DONE,\n  NORMAL,\n  EDIT,\n  INPUT_TASK,\n  ADD_TASK,\n  DONE_TASK,\n  SELECT_TASKTYPE,\n  SELECT_DATE,\n  DELETE_TASK,\n  EDIT_MODE,\n  INPUT_EDITTING_TASK,\n  EDIT_TASK,\n  EDIT_DATE\n} from \"../constants/Task\";\n\nconst initialState = {\n  task: {\n    id: 0,\n    name: \"\",\n    status: \"\",\n    deadLine: new Date()\n  },\n  tasks: [],\n  editTasks: [],\n  printTask: ALL,\n  mode: NORMAL,\n  todos: []\n};\n\nexport default function taskReducer(state = initialState, action) {\n  const { task, tasks, mode, editTasks } = state;\n  console.log(state);\n  const { type, payload } = action;\n  switch (type) {\n    // DB の変更があったら最新のtodoリストを返します\n    case \"TODOS_RECEIVE_DATA\":\n      let tasks = [];\n      console.log(\"receive\");\n      let data = action.payload.data;\n      if (data) {\n        Object.keys(data).forEach(key => {\n          let todo = data[key];\n          tasks.push({\n            key: key,\n            name: todo.task,\n            status: todo.status,\n            deadLine: todo.deadLine\n          });\n        });\n      }\n      return {\n        ...state,\n        tasks\n      };\n\n    // タスクを入力します\n    case INPUT_TASK:\n      return {\n        ...state,\n        task: {\n          ...task,\n          name: payload.task\n        }\n      };\n\n    // タスクを追加します\n    case ADD_TASK:\n      const newTask = {\n        id: tasks.length,\n        name: payload.task,\n        deadLine: task.deadLine,\n        status: NOT_DONE\n      };\n      return {\n        ...state,\n        task: {\n          name: \"\",\n          status: \"\",\n          deadLine: new Date()\n        },\n        tasks: tasks.concat([newTask])\n      };\n\n    // タスクの完了・未完了をトグルします\n    case DONE_TASK:\n      const doneTaskIndex = payload.taskId;\n      const updateTasks = tasks.slice(); // 配列コピー\n      updateTasks[doneTaskIndex].status =\n        updateTasks[doneTaskIndex].status === DONE ? NOT_DONE : DONE; // ステータストグル\n      return {\n        ...state,\n        tasks: updateTasks\n      };\n\n    // 「全て」「完了」「未完了」と表示するタスクを切り替えます\n    case SELECT_TASKTYPE:\n      return {\n        ...state,\n        printTask: payload.printTask\n      };\n\n    // 日付選択時にタスクを\n    case SELECT_DATE:\n      return {\n        ...state,\n        task: {\n          ...task,\n          deadLine: payload.deadLine\n        }\n      };\n\n    // タスクを削除します\n    case DELETE_TASK:\n      const deleteTaskIndex = payload.taskId;\n      const deletedTasks = tasks.slice(); // 配列コピー\n      deletedTasks.splice(deleteTaskIndex, 1); // 要素削除\n      deletedTasks.forEach(v => {\n        if (v.id > deleteTaskIndex) v.id--;\n      }); // 削除した以降のタスクのidを-1する\n      return {\n        ...state,\n        tasks: deletedTasks,\n        editTasks: deletedTasks.slice() // 編集モード時に変更したタスクを保存するための配列\n      };\n\n    // 通常モード・編集モードをトグルします\n    case EDIT_MODE:\n      return {\n        ...state,\n        mode: mode === EDIT ? NORMAL : EDIT,\n        editTasks: tasks.slice() // 編集モード時に変更したタスクを保存するための配列\n      };\n\n    // 編集中のタスクを保持します\n    case INPUT_EDITTING_TASK:\n      const edittingTasks = editTasks.slice();\n      edittingTasks[payload.taskId] = {\n        ...edittingTasks[payload.taskId],\n        name: payload.task,\n        editting: true\n      };\n      return {\n        ...state,\n        editTasks: edittingTasks\n      };\n\n    // 編集中の日付を保持します\n    case EDIT_DATE:\n      const edittingDateTasks = editTasks.slice();\n      let activeTaskId = Number(document.activeElement.className[0]); // classからカレンダーフォームidを取得\n      edittingDateTasks[activeTaskId] = {\n        ...edittingDateTasks[activeTaskId],\n        deadLine: payload.deadLine,\n        editting: true\n      };\n      return {\n        ...state,\n        editTasks: edittingDateTasks\n      };\n\n    // タスク内容編集(更新)をします。\n    case EDIT_TASK:\n      const edittedTasks = tasks.slice();\n      edittedTasks.find(v => v.id === payload.taskId).name = editTasks.find(\n        v => v.id === payload.taskId\n      ).name; // taskIdが一致したタスクの名前を更新\n      edittedTasks[payload.taskId].deadLine =\n        editTasks[payload.taskId].deadLine;\n      editTasks[payload.taskId].editting = false;\n      return {\n        ...state,\n        tasks: edittedTasks,\n        editTasks\n      };\n\n    default:\n      return state;\n  }\n}\n","import { LOGIN, LOGOUT } from \"../constants/Auth\";\n\nconst initialState = {\n  uid: null,\n  displayName: null,\n  token: null,\n  secretKey: null\n};\n\nexport default function authReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN:\n      if (action.payload.uid) {\n        return {\n          uid: action.payload.uid,\n          displayName: action.payload.displayName,\n          token: action.payload.token,\n          secretKey: action.payload.secretKey\n        };\n      } else {\n        return state;\n      }\n    case LOGOUT:\n      return {\n        uid: null,\n        displayName: null,\n        token: null,\n        secretKey: null\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  createStore as reducerCreateStore,\n  applyMiddleware,\n  combineReducers\n} from \"redux\";\nimport logger from \"redux-logger\"; // デバッグ時に使う\nimport thunk from \"redux-thunk\";\n\nimport taskReducer from \"../reducers/Task\";\nimport authReducer from \"../reducers/Auth\";\n\n// ローカルストレージにタスク状態を保存するためのmiddleware\nconst storageMiddleware = store => next => action => {\n  const result = next(action);\n  localStorage.setItem(\"app-state\", JSON.stringify(store.getState().task));\n  return result;\n};\n\n// store生成\nexport default function createStore() {\n  const savedTaskState = JSON.parse(localStorage.getItem(\"app-state\"));\n  return reducerCreateStore(\n    combineReducers({ task: taskReducer, auth: authReducer }),\n    applyMiddleware(logger, thunk, storageMiddleware)\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport Task from \"./containers/Task\";\nimport LoginButton from \"./containers/Auth\";\nimport createStore from \"./store\";\nimport \"./firebase/config\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore();\nReactDOM.render(\n  <Provider store={store}>\n    <Task />\n    <LoginButton />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}